import json
import sys
from typing import Any, Dict

import requests


def main() -> None:
    url: str = "http://localhost:8001/predict"
    payload: Dict[str, Any] = {
        "data": [
            {
                "id": 1,
                "text": "Здравствуйте!В августе оформила карту unionpay в городе Москва для вылета в Дубаи!Сотрудник все быстро и чётко объяснил про акцию возврата стоимости за изготовление карты в размере 5 тыс рублей при выполнении условий - 3 мес трат на сумму 10 тыс рублей, либо не снимать определённую сумму рублей. Я тратила в сентябре, октябре и ноябре необходимую сумму, при том, что звонила (а это в нынешних реалиях темпа жизни по 30 минут дозвона!!!!В чатах не отвечают!!!Могу приложить скрины!!!Пишут что ответит оператор и его имя, но никто не отвечает!Якобы большая нагрузка по обращениям - ещё бы!это вообще вопиюще по 25-30 минут на связи висеть и потом ещё может сброситься звонок!), в общем операторы проверяли мои расходы, потому что оказывается в условиях не все \"коды\" проходили и например коммуналка или покупки через маркетплейсы не считались! По условиям я читала что кэшбэк должен был вернуться на 20 рабочий день, но этого не случилось, потом я позвонила и оператор проверив выполнения условия озвучил, что в последний день месяца ждите - это 31.12, но и в этот день ничего не пришло, потом я зашла на банки.ру и увидела, что \"обман\" такой имеет место быть...очень неожиданно конечно, что банк может себе такое позволить. Прошу разобраться в сложившейся ситуации и помочь вернуть сумму кэшбэка.",
            }
        ]
    }

    try:
        response = requests.post(url, json=payload, timeout=30)
        response.raise_for_status()
    except requests.RequestException as exc:
        print(f"HTTP error: {exc}", file=sys.stderr)
        sys.exit(1)

    try:
        data = response.json()
    except ValueError:
        print("Invalid JSON in response", file=sys.stderr)
        print(response.text)
        sys.exit(1)

    print(json.dumps(data, ensure_ascii=False, indent=2))


if __name__ == "__main__":
    main()


